# -*- coding: utf-8 -*-
"""
generator.py
============
–°–æ–∑–¥–∞—ë—Ç –±–∞—Ç—á–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
–∫–æ—Ä–ø—É—Å —É—Ä–æ–≤–Ω—è 1|2|3 –≤ *.csv*.  
–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã:
  ‚Ä¢   —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ —Å—á—ë—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ (genres.py);
  ‚Ä¢   –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ Config + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–ø–∫—É *logs/*;
  ‚Ä¢   –º—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SIGINT (Ctrl-C) ‚Üí –Ω–µ —Ç–µ—Ä—è–µ–º –Ω–µ–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∏.
"""

from __future__ import annotations

import json
import logging
import signal
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List

import openai
import pandas as pd

from prompts import build_prompt, TEMPERATURE
from genres import weighted_random_genre, GENRES
from validator import TextValidator


class _GracefulExit:  # pylint: disable=too-few-public-methods
    """–õ–æ–≤–∏–º Ctrl-C, –∑–∞–≤–µ—Ä—à–∞–µ–º –±–∞—Ç—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""

    def __init__(self) -> None:
        self.stop = False
        signal.signal(signal.SIGINT, self._handler)
        signal.signal(signal.SIGTERM, self._handler)

    def _handler(self, *_):
        logging.info("‚èπ  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.stop = True


class DatasetGenerator:
    """–í—ã—Å–æ–∫–æ-—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""

    def __init__(self, cfg):
        self.cfg = cfg
        self.exit = _GracefulExit()

        if not cfg.api_key.startswith("sk-"):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OpenAI API-–∫–ª—é—á")

        self.client = openai.OpenAI(api_key=cfg.api_key)
        self.validator = TextValidator(cfg)
        self.out_dir = Path(cfg.output_dir)
        self.out_dir.mkdir(exist_ok=True)

        logging.info(
            "üü¢  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (%s, –∂–∞–Ω—Ä–æ–≤ ‚Äî %d)",
            cfg.model_name, len(GENRES)
        )

    # ------------------------------------------------------------------ #
    def test_run(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1|2|3 –∏ –ø–µ—á–∞—Ç–∞–µ–º."""
        for lvl in (1, 2, 3):
            genre = weighted_random_genre()
            rec = self._generate_one(lvl, genre)
            if rec:
                logging.info("‚úÖ  Test %d-star (%s): %s‚Ä¶", lvl, genre, rec["description"][:60])

    # ------------------------------------------------------------------ #
    def generate_level(self, level: int) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤."""
        target = self.cfg.target_count_per_level
        file_csv = self.out_dir / f"level_{level}.csv"
        done = sum(1 for _ in open(file_csv, encoding="utf-8")) - 1 if file_csv.exists() else 0
        logging.info("üöÄ  –£—Ä–æ–≤–µ–Ω—å %d: —É–∂–µ %d / %d", level, done, target)

        batch: list[Dict] = []

        while done < target and not self.exit.stop:
            rec = self._generate_one(level, weighted_random_genre())
            if rec:
                batch.append(rec)
                done += 1

            if len(batch) >= self.cfg.batch_size:
                self._save_batch(batch, file_csv)
                batch = []
                logging.info("üìä  %d / %d –≥–æ—Ç–æ–≤–æ", done, target)

        if batch:
            self._save_batch(batch, file_csv)
        logging.info("‚úÖ  –£—Ä–æ–≤–µ–Ω—å %d –∑–∞–≤–µ—Ä—à—ë–Ω (%d –æ–ø–∏—Å–∞–Ω–∏–π)", level, done)

    # ------------------------------------------------------------------ #
    def generate_all(self) -> None:
        """–ü—Ä–æ—Ö–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏ 1‚Üí3."""
        for lvl in (1, 2, 3):
            if self.exit.stop:
                break
            self.generate_level(lvl)

    # ========================= helpers ================================== #
    def _generate_one(self, level: int, genre: str) -> Dict | None:  # noqa: C901
        """–ó–∞–ø—Ä–æ—Å ‚Üí LLM ‚Üí –≤–∞–ª–∏–¥–∞—Ü–∏—è ‚Üí dict –∏–ª–∏ None."""
        sys_prompt, user_prompt = build_prompt(level, genre)
        for attempt in range(self.cfg.max_retries):
            try:
                resp = self.client.chat.completions.create(
                    model=self.cfg.model_name,
                    messages=[
                        {"role": "system", "content": sys_prompt},
                        {"role": "user", "content": user_prompt},
                    ],
                    temperature=TEMPERATURE[level],
                    max_tokens=400,
                )
                text = resp.choices[0].message.content.strip()
                is_ok, msg, stats = self.validator.validate(text, level)
                if is_ok:
                    return {
                        "level": level,
                        "genre": genre,
                        "description": text,
                        "word_count": stats["word_count"],
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                logging.debug("–û—Ç–±—Ä–∞–∫–æ–≤–∞–Ω–æ: %s", msg)
                return None
            except Exception as exc:  # pylint: disable=broad-except
                logging.warning("–ü–æ–ø—ã—Ç–∫–∞ %d | –æ—à–∏–±–∫–∞ API: %s", attempt + 1, exc)
                time.sleep(2)
        return None

    # ------------------------------------------------------------------ #
    @staticmethod
    def _save_batch(batch: List[Dict], path: Path) -> None:
        """–ê–ø–ø–µ–Ω–¥–∏–º batch –∫ csv (header ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª)."""
        df = pd.DataFrame(batch)
        df.to_csv(path, mode="a", header=not path.exists(),
                  index=False, encoding="utf-8")
